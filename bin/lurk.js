#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var spawn = require('child_process').spawn;
var program = require('commander');
var pkg = require(path.resolve(__dirname, '..', 'package.json'));
var emsdkDir = path.resolve(__dirname, '..', 'emsdk');
var emcc = path.join(emsdkDir, 'emscripten', 'master', 'emcc');
var empp = path.join(emsdkDir, 'emscripten', 'master', 'em++');
var emmake = path.join(emsdkDir, 'emscripten', 'master', 'emmake');
var ibBin = path.resolve(__dirname, '..', 'ib', 'ib');
var utility = require('../lib/utility.js');

program
  .version(pkg.version)
  .option('e, expose', 'view the emsdk environment variables')
  .option('b, build [target]', 'builds specified target')
  .option('-s, --src_root <path>', 'lurk source location for lurk build')
  .option('-o, --out_root <path>', 'lurk output location for lurk build')
  .option('-p, --print_script', 'print makefile generated by lurk build')
  .option('-t, --print_args', '')
  .option('-c, --cfg <config_file_name>', 'config file for lurk build relative to src_root')
  .parse(process.argv);

if (typeof program.src_root === 'string') {
  if (program.src_root.substring(0, 1) !== '/') {
    program.src_root = path.join(process.cwd(), program.src_root);
  }

  if (!fs.existsSync(program.src_root)) {
    utility.print([
      '',
      '--src_root ' + program.src_root + ' does not exist',
      ''
    ], 'red');

    process.exit(1);
  }
}

if (program.expose) {
  utility.print([
    '',
    'Emscripten SDK Location',
    '=======================',
    '',
    '  ' + emsdkDir,
    '',
    'Add it to your path',
    '===================',
    '',
    '  source ' + path.join(emsdkDir, 'emsdk_env.sh'),
    '  source ' + path.join(emsdkDir, 'emsdk_set_env.sh'),
    ''
  ], 'yellow');
}

if (program.build) {
  // add config object
  // environment variables
  process.env.emcc = emcc;
  process.env.empp = empp;
  process.env.emmake = emmake;
  var srcRoot = program.src_root || process.cwd();

  function failPackageJson() {
    utility.print([
      '',
      ['Build failed. Could not determine',
      'what to build! Please provide target',
      'to build for build parameter or',
      'provide a package.json in src_root',
      'with a `main` property'].join(' '),
      ''
    ], 'red');

    process.exit(1);
  }

  if (!fs.existsSync(path.join(srcRoot, 'package.json'))) {
    utility.print([
      '',
      'Warning: package.json does not exist in ' + srcRoot,
    ], 'yellow');

    if (typeof program.build !== 'string') {
      failPackageJson();
    }
  } else {
    var p = require(path.join(srcRoot, 'package.json'));

    if (
      typeof program.build !== 'string' &&
      typeof p.target !== 'string'
    ) {
      failPackageJson();
    } else if (typeof p.target === 'string') {
      program.build = p.target;
    }
  }

  if (program.build.substring(0, 1) !== '/') {
    program.build = '/' + program.build;
  }

  if (program.out_root === 'string') {
    if (program.out_root.substring(0, 1) !== '/') {
      program.out_root = path.resolve(proces.cwd(), program.out_root);
    }
  } else {
    program.out_root = path.join(program.src_root || process.cwd(), 'out');
  }

  var args = [
    '--cfg',
    program.cfg || 'common',
    '--src_root',
    program.src_root || process.cwd(),
    program.print_cfg ? '--print_cfg' : '',
    program.print_script ? '--print_script' : '',
    '--out_root',
    program.out_root,
    program.print_args ? '--print_args' : '',
    program.build
  ].filter(function (item) {
    return item !== '';
  });

  // spawn build process
  var build = spawn(ibBin, args, {
    stdio: 'inherit'
  });

  build.on('close', function (exitCode) {
    if (exitCode === 0) {
      utility.print(['', 'No Build Errors', ''], 'green');
    } else {
      utility.print(['', 'Build Failed', ''], 'yellow');
    }
  });
}
